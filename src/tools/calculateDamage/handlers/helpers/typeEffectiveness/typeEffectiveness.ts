import type { TypeName } from "@/types";

// 効果抜群（2倍）
const SUPER_EFFECTIVE: Record<TypeName, TypeName[]> = {
  ノーマル: [],
  ほのお: ["くさ", "こおり", "むし", "はがね"],
  みず: ["ほのお", "じめん", "いわ"],
  でんき: ["みず", "ひこう"],
  くさ: ["みず", "じめん", "いわ"],
  こおり: ["くさ", "じめん", "ひこう", "ドラゴン"],
  かくとう: ["ノーマル", "こおり", "いわ", "あく", "はがね"],
  どく: ["くさ"],
  じめん: ["ほのお", "でんき", "どく", "いわ", "はがね"],
  ひこう: ["くさ", "かくとう", "むし"],
  エスパー: ["かくとう", "どく"],
  むし: ["くさ", "エスパー", "あく"],
  いわ: ["ほのお", "こおり", "ひこう", "むし"],
  ゴースト: ["エスパー", "ゴースト"],
  ドラゴン: ["ドラゴン"],
  あく: ["エスパー", "ゴースト"],
  はがね: ["こおり", "いわ"],
};

// 効果いまひとつ（0.5倍）
const NOT_VERY_EFFECTIVE: Record<TypeName, TypeName[]> = {
  ノーマル: ["いわ", "はがね"],
  ほのお: ["ほのお", "みず", "いわ", "ドラゴン"],
  みず: ["みず", "くさ", "ドラゴン"],
  でんき: ["でんき", "くさ", "ドラゴン"],
  くさ: ["ほのお", "くさ", "どく", "ひこう", "むし", "ドラゴン", "はがね"],
  こおり: ["ほのお", "みず", "こおり", "はがね"],
  かくとう: ["どく", "ひこう", "エスパー", "むし"],
  どく: ["どく", "じめん", "いわ", "ゴースト"],
  じめん: ["くさ", "むし"],
  ひこう: ["でんき", "いわ", "はがね"],
  エスパー: ["エスパー", "はがね"],
  むし: ["ほのお", "かくとう", "どく", "ひこう", "ゴースト", "はがね"],
  いわ: ["かくとう", "じめん", "はがね"],
  ゴースト: ["あく", "はがね"],
  ドラゴン: ["はがね"],
  あく: ["かくとう", "あく", "はがね"],
  はがね: ["ほのお", "みず", "でんき", "はがね"],
};

// 効果なし（0倍）
const NO_EFFECT: Record<TypeName, TypeName[]> = {
  ノーマル: ["ゴースト"],
  ほのお: [],
  みず: [],
  でんき: ["じめん"],
  くさ: [],
  こおり: [],
  かくとう: ["ゴースト"],
  どく: ["はがね"],
  じめん: ["ひこう"],
  ひこう: [],
  エスパー: ["あく"],
  むし: [],
  いわ: [],
  ゴースト: ["ノーマル"],
  ドラゴン: [],
  あく: [],
  はがね: [],
};

export const getTypeEffectiveness = (
  attackType: TypeName,
  defenderTypes: TypeName[],
): number => {
  let effectiveness = 1;

  for (const defenderType of defenderTypes) {
    if (NO_EFFECT[attackType].includes(defenderType)) {
      return 0;
    }

    if (SUPER_EFFECTIVE[attackType].includes(defenderType)) {
      effectiveness *= 2;
    } else if (NOT_VERY_EFFECTIVE[attackType].includes(defenderType)) {
      effectiveness *= 0.5;
    }
  }

  return effectiveness;
};
